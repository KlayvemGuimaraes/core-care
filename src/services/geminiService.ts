import { GoogleGenerativeAI } from '@google/generative-ai';
import { GEMINI_CONFIG } from '../config/gemini';
import { PatientData, Question, AIAnalysis, Diagnosis, Answer } from '../types/health';

class GeminiService {
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor() {
    this.genAI = new GoogleGenerativeAI(GEMINI_CONFIG.apiKey);
    this.model = this.genAI.getGenerativeModel({ 
      model: GEMINI_CONFIG.model,
      generationConfig: GEMINI_CONFIG.generationConfig,
      safetySettings: GEMINI_CONFIG.safetySettings,
    });
  }

  async analyzeSymptoms(patientData: PatientData): Promise<AIAnalysis> {
    try {
      console.log('ü§ñ Usando Google Gemini para an√°lise de sintomas...');
      console.log('üìã Dados do paciente:', patientData);
      
      const prompt = this.buildAnalysisPrompt(patientData);
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log('‚úÖ Resposta do Gemini recebida:', text.substring(0, 200) + '...');
      
      return this.parseAnalysisResponse(text, patientData);
    } catch (error) {
      console.error('‚ùå Erro ao analisar sintomas com Gemini:', error);
      console.log('üîÑ Usando an√°lise local como fallback...');
      // Fallback para an√°lise local em caso de erro
      return this.getFallbackAnalysis(patientData);
    }
  }

  async refineDiagnosis(answers: Answer[], currentAnalysis: AIAnalysis): Promise<AIAnalysis> {
    try {
      console.log('ü§ñ Refinando diagn√≥stico com Google Gemini...');
      console.log('üìù Respostas recebidas:', answers);
      
      const prompt = this.buildRefinementPrompt(answers, currentAnalysis);
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log('‚úÖ Diagn√≥stico refinado pelo Gemini:', text.substring(0, 200) + '...');
      
      return this.parseRefinementResponse(text, currentAnalysis);
    } catch (error) {
      console.error('‚ùå Erro ao refinar diagn√≥stico com Gemini:', error);
      console.log('üîÑ Mantendo an√°lise atual...');
      return currentAnalysis;
    }
  }

  private buildAnalysisPrompt(patientData: PatientData): string {
    return `
Voc√™ √© um assistente m√©dico especializado em diagn√≥stico para agentes de sa√∫de em locais remotos do Brasil. 
Analise os sintomas do paciente e forne√ßa uma an√°lise m√©dica estruturada.

DADOS DO PACIENTE:
- Nome: ${patientData.name}
- Idade: ${patientData.age} anos
- Sexo: ${patientData.gender}
- Sintomas: ${patientData.symptoms}
- Hist√≥rico m√©dico: ${patientData.medicalHistory || 'N√£o informado'}
- Medica√ß√µes atuais: ${patientData.currentMedications || 'Nenhuma'}
- Sinais vitais: ${JSON.stringify(patientData.vitalSigns || {})}

INSTRU√á√ïES:
1. Analise os sintomas e identifique poss√≠veis condi√ß√µes m√©dicas
2. Para cada condi√ß√£o, calcule uma probabilidade (0-1)
3. Determine o n√≠vel de urg√™ncia (immediate, urgent, moderate, low)
4. Gere 3-5 perguntas espec√≠ficas para confirmar o diagn√≥stico
5. Forne√ßa recomenda√ß√µes baseadas na condi√ß√£o

FORMATO DE RESPOSTA (JSON):
{
  "initialAssessment": "Avalia√ß√£o inicial baseada nos sintomas",
  "possibleConditions": [
    {
      "condition": "Nome da condi√ß√£o",
      "probability": 0.8,
      "confidence": "high|medium|low",
      "symptoms": ["sintoma1", "sintoma2"],
      "recommendations": ["recomenda√ß√£o1", "recomenda√ß√£o2"],
      "urgency": "immediate|urgent|moderate|low",
      "nextSteps": ["passo1", "passo2"]
    }
  ],
  "generatedQuestions": [
    {
      "id": "question_1",
      "text": "Pergunta espec√≠fica",
      "type": "yes_no|multiple_choice|scale|text",
      "options": ["op√ß√£o1", "op√ß√£o2"] (apenas para multiple_choice),
      "category": "cardiovascular|neurological|respiratory|general",
      "priority": "high|medium|low"
    }
  ],
  "riskLevel": "critical|high|medium|low",
  "recommendations": ["recomenda√ß√£o geral 1", "recomenda√ß√£o geral 2"]
}

IMPORTANTE:
- Seja conservador com diagn√≥sticos cr√≠ticos
- Priorize condi√ß√µes que requerem aten√ß√£o imediata
- Use linguagem clara para agentes de sa√∫de
- Considere o contexto de locais remotos do Brasil
- Foque em condi√ß√µes comuns e trat√°veis
    `;
  }

  private buildRefinementPrompt(answers: Answer[], currentAnalysis: AIAnalysis): string {
    const answersText = answers.map(answer => {
      const question = currentAnalysis.generatedQuestions.find(q => q.id === answer.questionId);
      return `Pergunta: ${question?.text}\nResposta: ${answer.value}`;
    }).join('\n\n');

    return `
Com base nas respostas adicionais do paciente, refine o diagn√≥stico inicial.

AN√ÅLISE INICIAL:
${JSON.stringify(currentAnalysis, null, 2)}

RESPOSTAS ADICIONAIS:
${answersText}

INSTRU√á√ïES:
1. Ajuste as probabilidades das condi√ß√µes baseado nas novas respostas
2. Atualize o n√≠vel de confian√ßa
3. Mantenha o mesmo formato JSON da an√°lise inicial
4. Se necess√°rio, adicione novas condi√ß√µes identificadas
5. Atualize as recomenda√ß√µes baseado na nova informa√ß√£o

Retorne apenas o JSON atualizado.
    `;
  }

  private parseAnalysisResponse(text: string, patientData: PatientData): AIAnalysis {
    try {
      // Extrair JSON da resposta
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Resposta n√£o cont√©m JSON v√°lido');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      return {
        initialAssessment: parsed.initialAssessment || this.generateInitialAssessment(patientData, parsed.possibleConditions || []),
        possibleConditions: parsed.possibleConditions || [],
        generatedQuestions: parsed.generatedQuestions || [],
        riskLevel: parsed.riskLevel || 'low',
        recommendations: parsed.recommendations || []
      };
    } catch (error) {
      console.error('Erro ao parsear resposta do Gemini:', error);
      return this.getFallbackAnalysis(patientData);
    }
  }

  private parseRefinementResponse(text: string, currentAnalysis: AIAnalysis): AIAnalysis {
    try {
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        return currentAnalysis;
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      return {
        initialAssessment: parsed.initialAssessment || currentAnalysis.initialAssessment,
        possibleConditions: parsed.possibleConditions || currentAnalysis.possibleConditions,
        generatedQuestions: parsed.generatedQuestions || currentAnalysis.generatedQuestions,
        riskLevel: parsed.riskLevel || currentAnalysis.riskLevel,
        recommendations: parsed.recommendations || currentAnalysis.recommendations
      };
    } catch (error) {
      console.error('Erro ao parsear refinamento do Gemini:', error);
      return currentAnalysis;
    }
  }

  private getFallbackAnalysis(patientData: PatientData): AIAnalysis {
    // An√°lise de fallback usando conhecimento m√©dico b√°sico
    const symptoms = patientData.symptoms.toLowerCase();
    const possibleConditions: Diagnosis[] = [];
    const generatedQuestions: Question[] = [];

    // Detec√ß√£o b√°sica de condi√ß√µes cr√≠ticas
    if (symptoms.includes('aperto no peito') || symptoms.includes('dor no peito')) {
      possibleConditions.push({
        condition: 'Poss√≠vel Angina ou Infarto',
        probability: 0.7,
        confidence: 'medium' as const,
        symptoms: ['aperto no peito'],
        recommendations: [
          'ATEN√á√ÉO: Procure atendimento m√©dico IMEDIATAMENTE',
          'Chame SAMU (192) se necess√°rio',
          'Mantenha repouso absoluto'
        ],
        urgency: 'urgent' as const,
        nextSteps: [
          'Encaminhar para atendimento m√©dico urgente',
          'Coletar sinais vitais',
          'Preparar para transporte se necess√°rio'
        ]
      });

      generatedQuestions.push(
        {
          id: 'chest_pain_1',
          text: 'A dor piora com esfor√ßo f√≠sico?',
          type: 'yes_no',
          category: 'cardiovascular',
          priority: 'high'
        },
        {
          id: 'chest_pain_2',
          text: 'A dor irradia para o bra√ßo esquerdo?',
          type: 'yes_no',
          category: 'cardiovascular',
          priority: 'high'
        }
      );
    }

    if (symptoms.includes('tontura') || symptoms.includes('desmaio')) {
      possibleConditions.push({
        condition: 'Poss√≠vel Hipotens√£o ou Problema Neurol√≥gico',
        probability: 0.5,
        confidence: 'medium' as const,
        symptoms: ['tontura'],
        recommendations: [
          'Verificar press√£o arterial',
          'Manter paciente deitado com pernas elevadas',
          'Procurar atendimento m√©dico'
        ],
        urgency: 'moderate' as const,
        nextSteps: [
          'Verificar sinais vitais',
          'Orientar sobre hidrata√ß√£o',
          'Agendar consulta m√©dica'
        ]
      });

      generatedQuestions.push({
        id: 'dizziness_1',
        text: 'A tontura acontece ao levantar?',
        type: 'yes_no',
        category: 'neurological',
        priority: 'medium'
      });
    }

    // Perguntas gerais se n√£o houver condi√ß√µes espec√≠ficas
    if (generatedQuestions.length === 0) {
      generatedQuestions.push(
        {
          id: 'general_1',
          text: 'Voc√™ est√° com febre?',
          type: 'yes_no',
          category: 'general',
          priority: 'medium'
        },
        {
          id: 'general_2',
          text: 'Os sintomas come√ßaram h√° quanto tempo?',
          type: 'multiple_choice',
          options: ['Menos de 1 hora', '1-6 horas', '6-24 horas', 'Mais de 24 horas'],
          category: 'general',
          priority: 'high'
        }
      );
    }

    return {
      initialAssessment: this.generateInitialAssessment(patientData, possibleConditions),
      possibleConditions,
      generatedQuestions,
      riskLevel: possibleConditions.some(c => c.urgency === 'urgent') ? 'high' : 'medium',
      recommendations: this.getGeneralRecommendations(possibleConditions.some(c => c.urgency === 'urgent') ? 'high' : 'medium')
    };
  }

  private generateInitialAssessment(patientData: PatientData, conditions: Diagnosis[]): string {
    const topCondition = conditions[0];
    
    if (topCondition) {
      return `Baseado nos sintomas relatados ("${patientData.symptoms}"), h√° uma probabilidade de ${Math.round(topCondition.probability * 100)}% de que o paciente apresente ${topCondition.condition}. ${topCondition.urgency === 'urgent' ? 'ATEN√á√ÉO: Esta condi√ß√£o requer atendimento m√©dico IMEDIATO.' : ''}`;
    }
    
    return `Os sintomas relatados ("${patientData.symptoms}") requerem investiga√ß√£o adicional. Ser√° necess√°rio fazer algumas perguntas espec√≠ficas para melhor avaliar a condi√ß√£o do paciente.`;
  }

  private getGeneralRecommendations(riskLevel: string): string[] {
    const recommendations = {
      high: [
        'Encaminhar para atendimento m√©dico urgente',
        'Monitorar sinais vitais constantemente',
        'Documentar todos os sintomas',
        'Preparar para transporte m√©dico'
      ],
      medium: [
        'Agendar consulta m√©dica em 24-48 horas',
        'Monitorar evolu√ß√£o dos sintomas',
        'Orientar sobre sinais de alerta',
        'Fornecer orienta√ß√µes de cuidado'
      ],
      low: [
        'Monitorar evolu√ß√£o dos sintomas',
        'Orientar sobre cuidados gerais',
        'Retornar se sintomas piorarem',
        'Manter acompanhamento regular'
      ]
    };

    return recommendations[riskLevel as keyof typeof recommendations] || recommendations.low;
  }
}

export const geminiService = new GeminiService();
